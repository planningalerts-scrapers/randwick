---
http_interactions:
- request:
    method: get
    uri: http://planning.randwick.nsw.gov.au/Pages/XC.Track.Advanced/SearchApplication.aspx?d=last14days&k=LodgementDate&o=xml&t=217
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - planning.randwick.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - application/xml; charset=utf-8
      Set-Cookie:
      - ASP.NET_SessionId=0tro25ekk11ed1pkurwvp5if; path=/; HttpOnly
      X-Frame-Options:
      - SAMEORIGIN
      Date:
      - Mon, 10 Jun 2019 05:20:03 GMT
      Content-Length:
      - '238489'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <?xml version="1.0"?><NewDataSet>
  <Application>
    <ApplicationId>646564</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/726/2018A</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>726</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development. Original consent: Alterations and two storey addition to the rear of the existing dwelling (Heritage Item).</ApplicationDetails>
    <CreatedDate>2019-06-07T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-07T00:00:00+10:00</LodgementDate>
    <EstimatedCost>400000.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>3</DADays>
    <ApplicationIdS>646564</ApplicationIdS>
    <Address>
      <PropertyId>310412</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>310412</GeocodeId>
      <ApplicationId>646564</ApplicationId>
      <Line1>13 Kemmis StreetRANDWICK  NSW  2031                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>646564</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>195838</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>WYLIE</FamilyName>
      <GivenName>DONALD HERBERT</GivenName>
      <Initial>DH   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D H Wylie</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>195839</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>WYLIE</FamilyName>
      <GivenName>JOY ROSALIND</GivenName>
      <Initial>JR   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs J R Wylie</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>438679</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KIDD</FamilyName>
      <GivenName>FLETCHER LIONEL</GivenName>
      <Initial>FLM  </Initial>
      <NameType>P</NameType>
      <FullName>Mr F L M Kidd</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>444018</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>MANNING</FamilyName>
      <GivenName>AMBER </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Ms A Manning</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>438679</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KIDD</FamilyName>
      <GivenName>FLETCHER LIONEL</GivenName>
      <Initial>FLM  </Initial>
      <NameType>P</NameType>
      <FullName>Mr F L M Kidd</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>438680</PartyId>
      <ApplicationId>646564</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>TURNBULL</FamilyName>
      <GivenName>AMBER </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Ms A Turnbull</FullName>
      <ApplicationIdS>646564</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646564</ApplicationId>
      <ApplicationIdS>646564</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646568</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/311/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>311</ReferenceNumberNumber>
    <ApplicationDetails>Construct rear addition to dwelling.</ApplicationDetails>
    <CreatedDate>2019-06-07T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-07T00:00:00+10:00</LodgementDate>
    <EstimatedCost>180000.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>3</DADays>
    <ApplicationIdS>646568</ApplicationIdS>
    <Address>
      <PropertyId>313995</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>313995</GeocodeId>
      <ApplicationId>646568</ApplicationId>
      <Line1>66 Mooramie AvenueKENSINGTON  NSW  2033                                                            </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646568</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>82012</PartyId>
      <ApplicationId>646568</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MOUNT SINAI COLLEGE</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Mount Sinai College</FullName>
      <ApplicationIdS>646568</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>42694</PartyId>
      <ApplicationId>646568</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VISSARITIS</FamilyName>
      <GivenName>HELEN </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs H Vissaritis</FullName>
      <ApplicationIdS>646568</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646568</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646568</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>335627</PartyId>
      <ApplicationId>646568</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VISSARITIS</FamilyName>
      <GivenName>HELEN </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Ms H Vissaritis</FullName>
      <ApplicationIdS>646568</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646568</ApplicationId>
      <ApplicationIdS>646568</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646507</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/310/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>310</ReferenceNumberNumber>
    <ApplicationDetails>Torrens Title subdivision of dual occupancy</ApplicationDetails>
    <CreatedDate>2019-06-06T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-06T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>4</DADays>
    <ApplicationIdS>646507</ApplicationIdS>
    <Address>
      <PropertyId>311811</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>311811</GeocodeId>
      <ApplicationId>646507</ApplicationId>
      <Line1>93 Macquarie StreetCHIFLEY  NSW  2036                                                              </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646507</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>344882</PartyId>
      <ApplicationId>646507</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KOGUS</FamilyName>
      <GivenName>ILAN </GivenName>
      <Initial>I    </Initial>
      <NameType>P</NameType>
      <FullName>Mr I Kogus</FullName>
      <ApplicationIdS>646507</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>334452</PartyId>
      <ApplicationId>646507</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUPERIOR DESIGNS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Superior Designs</FullName>
      <ApplicationIdS>646507</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646507</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646507</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>137465</PartyId>
      <ApplicationId>646507</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THOMPSON</FamilyName>
      <GivenName>TIMOTHY CHARLES</GivenName>
      <Initial>TC   </Initial>
      <NameType>P</NameType>
      <FullName>Mr T C Thompson</FullName>
      <ApplicationIdS>646507</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646507</ApplicationId>
      <ApplicationIdS>646507</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646506</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/309/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>309</ReferenceNumberNumber>
    <ApplicationDetails>Torrens Title of existing dual occupancy into 2 lots</ApplicationDetails>
    <CreatedDate>2019-06-06T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-06T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>4</DADays>
    <ApplicationIdS>646506</ApplicationIdS>
    <Address>
      <PropertyId>310143</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>310143</GeocodeId>
      <ApplicationId>646506</ApplicationId>
      <Line1>21-21A Jersey RoadMATRAVILLE  NSW  2036                                                            </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646506</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>299031</PartyId>
      <ApplicationId>646506</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HALE</FamilyName>
      <GivenName>NIKI </GivenName>
      <Initial>N    </Initial>
      <NameType>P</NameType>
      <FullName>Ms N Hale</FullName>
      <ApplicationIdS>646506</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>334452</PartyId>
      <ApplicationId>646506</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUPERIOR DESIGNS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Superior Designs</FullName>
      <ApplicationIdS>646506</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646506</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646506</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>348277</PartyId>
      <ApplicationId>646506</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>21 JERSEY ROAD MATRAVILLE PTY LIMITED</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>21 Jersey Road Matraville Pty Limited</FullName>
      <ApplicationIdS>646506</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646506</ApplicationId>
      <ApplicationIdS>646506</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646505</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/308/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>308</ReferenceNumberNumber>
    <ApplicationDetails>Strata subdivision of existing into 2 lots</ApplicationDetails>
    <CreatedDate>2019-06-06T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-06T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>4</DADays>
    <ApplicationIdS>646505</ApplicationIdS>
    <Address>
      <PropertyId>320325</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>320325</GeocodeId>
      <ApplicationId>646505</ApplicationId>
      <Line1>16 Wills AvenueCHIFLEY  NSW  2036                                                                  </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646505</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>334374</PartyId>
      <ApplicationId>646505</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MIRMIKIDIS</FamilyName>
      <GivenName>BYRON ALEXANDER</GivenName>
      <Initial>BA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr B A Mirmikidis</FullName>
      <ApplicationIdS>646505</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>334452</PartyId>
      <ApplicationId>646505</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUPERIOR DESIGNS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Superior Designs</FullName>
      <ApplicationIdS>646505</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646505</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646505</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>231914</PartyId>
      <ApplicationId>646505</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>BAYSCAPE 2003 PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Bayscape 2003 Pty Ltd</FullName>
      <ApplicationIdS>646505</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646505</ApplicationId>
      <ApplicationIdS>646505</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646501</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/307/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>307</ReferenceNumberNumber>
    <ApplicationDetails>Strata subdivision of existing</ApplicationDetails>
    <CreatedDate>2019-06-06T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-06T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>4</DADays>
    <ApplicationIdS>646501</ApplicationIdS>
    <Address>
      <PropertyId>348907</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348907</GeocodeId>
      <ApplicationId>646501</ApplicationId>
      <Line1>14-14A Caley StreetCHIFLEY  NSW  2036                                                              </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646501</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>298883</PartyId>
      <ApplicationId>646501</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KING</FamilyName>
      <GivenName>GEOFFREY SCOTT</GivenName>
      <Initial>GSF  </Initial>
      <NameType>P</NameType>
      <FullName>Mr G S F King</FullName>
      <ApplicationIdS>646501</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>298885</PartyId>
      <ApplicationId>646501</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>WATSON</FamilyName>
      <GivenName>MARNIE KAY</GivenName>
      <Initial>MK   </Initial>
      <NameType>P</NameType>
      <FullName>Ms M K Watson</FullName>
      <ApplicationIdS>646501</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>334452</PartyId>
      <ApplicationId>646501</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUPERIOR DESIGNS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Superior Designs</FullName>
      <ApplicationIdS>646501</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646501</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646501</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>233209</PartyId>
      <ApplicationId>646501</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SOUTHERN SYDNEY PROPERTIES PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Southern Sydney Properties Pty Ltd</FullName>
      <ApplicationIdS>646501</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646501</ApplicationId>
      <ApplicationIdS>646501</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646035</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/300/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>300</ReferenceNumberNumber>
    <ApplicationDetails>Installation of a new electricity substation within Shop 6 of the existing commercial tenancy fronting Mason Street, including partial removal of awning, new masonry wall and vent panels.</ApplicationDetails>
    <CreatedDate>2016-06-06T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-06T00:00:00+10:00</LodgementDate>
    <EstimatedCost>120000.000000</EstimatedCost>
    <Officer>Alexandra Marks                                   </Officer>
    <DADays>1099</DADays>
    <ApplicationIdS>646035</ApplicationIdS>
    <Address>
      <PropertyId>296890</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>296890</GeocodeId>
      <ApplicationId>646035</ApplicationId>
      <Line1>103 Mason StreetMAROUBRA  NSW  2035                                                                </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>646035</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>157751</PartyId>
      <ApplicationId>646035</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CHIN</FamilyName>
      <GivenName>EUGENE TECK</GivenName>
      <Initial>ETM  </Initial>
      <NameType>P</NameType>
      <FullName>Mr E T M Chin</FullName>
      <ApplicationIdS>646035</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>404778</PartyId>
      <ApplicationId>646035</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>FOX JOHNSTON ARCHITECTS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Fox Johnston Architects</FullName>
      <ApplicationIdS>646035</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>288153</PartyId>
      <ApplicationId>646035</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646035</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>28755</PartyId>
      <ApplicationId>646035</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HUNGAY PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Hungay Pty Ltd</FullName>
      <ApplicationIdS>646035</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646035</ApplicationId>
      <ApplicationIdS>646035</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646393</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/306/2019</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>306</ReferenceNumberNumber>
    <ApplicationDetails>Torrens title subdivision of an approved dual occupancy.</ApplicationDetails>
    <CreatedDate>2019-06-05T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-05T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>5</DADays>
    <ApplicationIdS>646393</ApplicationIdS>
    <Address>
      <PropertyId>357566</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>311037</GeocodeId>
      <ApplicationId>646393</ApplicationId>
      <Line1>27 Lawson StreetMATRAVILLE  NSW  2036                                                              </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646393</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>329135</PartyId>
      <ApplicationId>646393</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LPS COOGEE PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>LPS Coogee Pty Ltd</FullName>
      <ApplicationIdS>646393</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>244428</PartyId>
      <ApplicationId>646393</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RESIDENTIAL LOGISTICS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Residential Logistics Pty Ltd</FullName>
      <ApplicationIdS>646393</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646393</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646393</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>424968</PartyId>
      <ApplicationId>646393</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THIRUNAVUKKARASU</FamilyName>
      <GivenName>KRISHAN </GivenName>
      <Initial>K    </Initial>
      <NameType>P</NameType>
      <FullName>Mr K Thirunavukkarasu</FullName>
      <ApplicationIdS>646393</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646393</ApplicationId>
      <ApplicationIdS>646393</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645311</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/305/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>305</ReferenceNumberNumber>
    <ApplicationDetails>Demolition of existing dwelling and construction of a new dwelling including vehicle crossing.</ApplicationDetails>
    <CreatedDate>2019-05-28T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-05T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1500000.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>13</DADays>
    <ApplicationIdS>645311</ApplicationIdS>
    <Address>
      <PropertyId>306001</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>306001</GeocodeId>
      <ApplicationId>645311</ApplicationId>
      <Line1>43-45 Endeavour AvenueLA PEROUSE  NSW  2036                                                        </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>645311</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>413494</PartyId>
      <ApplicationId>645311</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>FARRELLY</FamilyName>
      <GivenName>ASHLYN DENISE</GivenName>
      <Initial>AD   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs A D Farrelly</FullName>
      <ApplicationIdS>645311</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>413496</PartyId>
      <ApplicationId>645311</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>FARRELLY</FamilyName>
      <GivenName>CAROLINE ANNE</GivenName>
      <Initial>CA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms C A Farrelly</FullName>
      <ApplicationIdS>645311</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>243587</PartyId>
      <ApplicationId>645311</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>DEVELOPMENT DESIGN PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Development Design Pty Ltd</FullName>
      <ApplicationIdS>645311</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>448562</PartyId>
      <ApplicationId>645311</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KOUROS</FamilyName>
      <GivenName>HARRY </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mr H Kouros</FullName>
      <ApplicationIdS>645311</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>448563</PartyId>
      <ApplicationId>645311</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>KOUROS</FamilyName>
      <GivenName>PATRICIA </GivenName>
      <Initial>P    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs P Kouros</FullName>
      <ApplicationIdS>645311</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645311</ApplicationId>
      <ApplicationIdS>645311</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646391</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/304/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>304</ReferenceNumberNumber>
    <ApplicationDetails>Alterations and additions to existing dwelling at lower ground, ground and first floor levels, landscaping, new external stairs, bin area and associated works.</ApplicationDetails>
    <CreatedDate>2019-06-05T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-05T00:00:00+10:00</LodgementDate>
    <EstimatedCost>490000.000000</EstimatedCost>
    <Officer>Chahrazad Rahe                                    </Officer>
    <DADays>5</DADays>
    <ApplicationIdS>646391</ApplicationIdS>
    <Address>
      <PropertyId>308264</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>308264</GeocodeId>
      <ApplicationId>646391</ApplicationId>
      <Line1>28 Gregory StreetSOUTH COOGEE  NSW  2034                                                           </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>646391</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>42337</PartyId>
      <ApplicationId>646391</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GLENBECK PTY LIMITED</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Glenbeck Pty Limited</FullName>
      <ApplicationIdS>646391</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>165562</PartyId>
      <ApplicationId>646391</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>DESIGN STUDIO 407</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Design Studio 407</FullName>
      <ApplicationIdS>646391</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646391</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646391</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>367203</PartyId>
      <ApplicationId>646391</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ANDREOU</FamilyName>
      <GivenName>GEORGE ANTHONY</GivenName>
      <Initial>GA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr G A Andreou</FullName>
      <ApplicationIdS>646391</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646391</ApplicationId>
      <ApplicationIdS>646391</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646288</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/486/2017A</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2017</ReferenceNumberYear>
    <ReferenceNumberNumber>486</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development including ground and first floor internal modifications, changes to ground floor windows, changes to building materials, new skylight, and associated works. Original consent: Demolition of existing structures, construction of two storey attached dual occupancy with garages and associated works.</ApplicationDetails>
    <CreatedDate>2019-06-04T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-04T00:00:00+10:00</LodgementDate>
    <EstimatedCost>949201.000000</EstimatedCost>
    <Officer>Jayden Perry                                      </Officer>
    <DADays>6</DADays>
    <ApplicationIdS>646288</ApplicationIdS>
    <Address>
      <PropertyId>307979</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>307979</GeocodeId>
      <ApplicationId>646288</ApplicationId>
      <Line1>11 Giles StreetCHIFLEY  NSW  2036                                                                  </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646288</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>72502</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ZABOW</FamilyName>
      <GivenName>DERRICK ETTMANN</GivenName>
      <Initial>DE   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D E Zabow</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>72503</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>ZABOW</FamilyName>
      <GivenName>MYRA </GivenName>
      <Initial>M    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs M Zabow</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>431477</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KEHANE</FamilyName>
      <GivenName>JACK </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Kehane</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>299046</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KEHANE</FamilyName>
      <GivenName>JACK ANDREW</GivenName>
      <Initial>JA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J A Kehane</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>299047</PartyId>
      <ApplicationId>646288</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>KEHANE</FamilyName>
      <GivenName>MARK PATRICK</GivenName>
      <Initial>MP   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M P Kehane</FullName>
      <ApplicationIdS>646288</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646288</ApplicationId>
      <ApplicationIdS>646288</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646308</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/370/2017B</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2017</ReferenceNumberYear>
    <ReferenceNumberNumber>370</ReferenceNumberNumber>
    <Amendment>B</Amendment>
    <ApplicationDetails>Modification of approved development by addition of Building Manager's office on ground floor of Building E3.3, updated BASIX certificate, alteration to basement car and bicycle parking layout. Original consent: Development Application for Lots E3 and E4 within the Newmarket Randwick development comprising of demolition of existing structures, remediation works construction of 4 residential flat buildings between 3 and 7 storeys containing 165 dwellings, two levels of basement car parking with 175 residential car park spaces, 17 visitor spaces, 165 bicycle spaces, 10 motorcycle spaces, landscaping and associated works (Heritage Item).</ApplicationDetails>
    <CreatedDate>2019-06-04T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-04T00:00:00+10:00</LodgementDate>
    <EstimatedCost>69896304.000000</EstimatedCost>
    <Officer>Louis Coorey                                      </Officer>
    <DADays>6</DADays>
    <ApplicationIdS>646308</ApplicationIdS>
    <Address>
      <PropertyId>320788</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>320788</GeocodeId>
      <ApplicationId>646308</ApplicationId>
      <Line1>29-39 Young StreetRANDWICK  NSW  2031                                                              </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646308</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>424721</PartyId>
      <ApplicationId>646308</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CBUS PROPERTY SYDNEY PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Cbus Property Sydney Pty Ltd</FullName>
      <ApplicationIdS>646308</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646308</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646308</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>409513</PartyId>
      <ApplicationId>646308</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CBUS PROPERTY SYDNEY RESIDENTIAL PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Cbus Property Sydney Residential Pty Ltd</FullName>
      <ApplicationIdS>646308</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646308</ApplicationId>
      <ApplicationIdS>646308</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646329</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/302/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>302</ReferenceNumberNumber>
    <ApplicationDetails>Footway dining area for 7 tables and 21 chairs to front of Ritz Cinema with hours of 9:00am to midnight Monday to Saturday and 9:00am to 10:00pm Sunday.</ApplicationDetails>
    <CreatedDate>2019-06-04T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-04T00:00:00+10:00</LodgementDate>
    <EstimatedCost>6600.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>6</DADays>
    <ApplicationIdS>646329</ApplicationIdS>
    <Address>
      <PropertyId>323274</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>323274</GeocodeId>
      <ApplicationId>646329</ApplicationId>
      <Line1>39-47 St Pauls StreetRANDWICK  NSW  2031                                                           </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>646329</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>242578</PartyId>
      <ApplicationId>646329</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MARTIN</FamilyName>
      <GivenName>DENIS TIMOTHY</GivenName>
      <Initial>DT   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D T Martin</FullName>
      <ApplicationIdS>646329</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>242579</PartyId>
      <ApplicationId>646329</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>MARTIN</FamilyName>
      <GivenName>SUZANNE CATHERINE</GivenName>
      <Initial>SCM  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S C M Martin</FullName>
      <ApplicationIdS>646329</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>275644</PartyId>
      <ApplicationId>646329</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MILESTONE AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Milestone Australia Pty Ltd</FullName>
      <ApplicationIdS>646329</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646329</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646329</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>464791</PartyId>
      <ApplicationId>646329</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ARVERNE PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Arverne Pty Ltd</FullName>
      <ApplicationIdS>646329</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646329</ApplicationId>
      <ApplicationIdS>646329</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646327</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/301/2019</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>301</ReferenceNumberNumber>
    <ApplicationDetails>Torrens title subdivision of approved dual occupancy.</ApplicationDetails>
    <CreatedDate>2019-06-04T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-04T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Angela Manahan                                    </Officer>
    <DADays>6</DADays>
    <ApplicationIdS>646327</ApplicationIdS>
    <Address>
      <PropertyId>306208</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>306208</GeocodeId>
      <ApplicationId>646327</ApplicationId>
      <Line1>39 Eyre StreetCHIFLEY  NSW  2036                                                                   </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646327</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>316133</PartyId>
      <ApplicationId>646327</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>FARRELLY</FamilyName>
      <GivenName>FRANCIS THOMAS</GivenName>
      <Initial>FT   </Initial>
      <NameType>P</NameType>
      <FullName>Mr F T Farrelly</FullName>
      <ApplicationIdS>646327</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>316132</PartyId>
      <ApplicationId>646327</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VARGA</FamilyName>
      <GivenName>JUDIT </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs J Varga</FullName>
      <ApplicationIdS>646327</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>420750</PartyId>
      <ApplicationId>646327</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NARNENAE PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Narnenae Pty Ltd</FullName>
      <ApplicationIdS>646327</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646327</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646327</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>420750</PartyId>
      <ApplicationId>646327</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NARNENAE PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Narnenae Pty Ltd</FullName>
      <ApplicationIdS>646327</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646327</ApplicationId>
      <ApplicationIdS>646327</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646257</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/178/2018A</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>178</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development including additional storage area in basement, new sliding gate to driveway, increase in height of northern section of front boundary wall. Original consent: Demolition of existing dwelling and construction of a new two/three storey dwelling, swimming pool and cabana.</ApplicationDetails>
    <CreatedDate>2019-06-04T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-04T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1529088.000000</EstimatedCost>
    <Officer>Perry Head                                        </Officer>
    <DADays>6</DADays>
    <ApplicationIdS>646257</ApplicationIdS>
    <Address>
      <PropertyId>319397</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>319397</GeocodeId>
      <ApplicationId>646257</ApplicationId>
      <Line1>7 Undine StreetMAROUBRA  NSW  2035                                                                 </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>646257</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>405441</PartyId>
      <ApplicationId>646257</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>DANGELO</FamilyName>
      <GivenName>ADAM </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Mr A D'Angelo</FullName>
      <ApplicationIdS>646257</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>452246</PartyId>
      <ApplicationId>646257</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CMH DESIGN PTY LTD TA CM HAIRIS ARCHITECTS</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Cmh Design Pty Ltd T/A Cm Hairis Architects</FullName>
      <ApplicationIdS>646257</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646257</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646257</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>438588</PartyId>
      <ApplicationId>646257</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KUZINKOVAS</FamilyName>
      <GivenName>VYTAURAS </GivenName>
      <Initial>V    </Initial>
      <NameType>P</NameType>
      <FullName>Mr V Kuzinkovas</FullName>
      <ApplicationIdS>646257</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>438590</PartyId>
      <ApplicationId>646257</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>KUZINKOVIENE</FamilyName>
      <GivenName>DAIVA </GivenName>
      <Initial>D    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs D Kuzinkoviene</FullName>
      <ApplicationIdS>646257</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646257</ApplicationId>
      <ApplicationIdS>646257</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646097</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/502/2018B</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>502</ReferenceNumberNumber>
    <Amendment>B</Amendment>
    <ApplicationDetails>Modification of approved development by re-shaping awning footprint at the Entry Level and provision of a support column below on the southern side of the awning. Original consent: New awning above the rear outdoor terrace area at lower ground floor level.</ApplicationDetails>
    <CreatedDate>2019-06-03T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>19800.000000</EstimatedCost>
    <Officer>William Jones                                     </Officer>
    <DADays>7</DADays>
    <ApplicationIdS>646097</ApplicationIdS>
    <Address>
      <PropertyId>317627</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>317627</GeocodeId>
      <ApplicationId>646097</ApplicationId>
      <Line1>7 Seaside ParadeSOUTH COOGEE  NSW  2034                                                            </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>646097</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>58902</PartyId>
      <ApplicationId>646097</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>WILKINSON</FamilyName>
      <GivenName>ROSEMARY ANNA</GivenName>
      <Initial>RA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms R A Wilkinson</FullName>
      <ApplicationIdS>646097</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>309106</PartyId>
      <ApplicationId>646097</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SANTOS ARCHITECTURE</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Santos Architecture</FullName>
      <ApplicationIdS>646097</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646097</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646097</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>323158</PartyId>
      <ApplicationId>646097</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ELEFTHERIADES</FamilyName>
      <GivenName>MARIA </GivenName>
      <Initial>M    </Initial>
      <NameType>P</NameType>
      <FullName>Ms M Eleftheriades</FullName>
      <ApplicationIdS>646097</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646097</ApplicationId>
      <ApplicationIdS>646097</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646007</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/299/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>299</ReferenceNumberNumber>
    <ApplicationDetails>Demolition of existing structures and construction of a part 2 and part 3 storey dwelling with rooftop terrace, semi-basement garage, swimming pool, landscaping &amp; associated site works.</ApplicationDetails>
    <CreatedDate>2019-06-03T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1178144.000000</EstimatedCost>
    <Officer>Angela Manahan                                    </Officer>
    <DADays>7</DADays>
    <ApplicationIdS>646007</ApplicationIdS>
    <Address>
      <PropertyId>305211</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>305211</GeocodeId>
      <ApplicationId>646007</ApplicationId>
      <Line1>74 Dudley StreetCOOGEE  NSW  2034                                                                  </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>646007</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>335042</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>3</Sequence>
      <FamilyName>MERILLO</FamilyName>
      <GivenName>ADAM PHILLIP</GivenName>
      <Initial>AP   </Initial>
      <NameType>P</NameType>
      <FullName>Mr A P Merillo</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>184936</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MERILLO</FamilyName>
      <GivenName>JOHN JOSEPH</GivenName>
      <Initial>JJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J J Merillo</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>335041</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>MERILLO</FamilyName>
      <GivenName>KAREN SINCLAIR</GivenName>
      <Initial>KS   </Initial>
      <NameType>P</NameType>
      <FullName>Ms K S Merillo</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>469028</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JARRETT</FamilyName>
      <GivenName>CHRIS </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Mr C Jarrett</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>446413</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RIGOPOULOS</FamilyName>
      <GivenName>CHRISTOPHER </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Mr C Rigopoulos</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>446413</PartyId>
      <ApplicationId>646007</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RIGOPOULOS</FamilyName>
      <GivenName>CHRISTOPHER </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Mr C Rigopoulos</FullName>
      <ApplicationIdS>646007</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646007</ApplicationId>
      <ApplicationIdS>646007</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645828</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/298/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>298</ReferenceNumberNumber>
    <ApplicationDetails>Alterations and additions to existing building at ground, first, second and third floor levels with conversion to a dwelling, construction of garage to front, swimming pool with landscaping and cabana at level 1 with associated works.</ApplicationDetails>
    <CreatedDate>2019-05-29T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>826968.000000</EstimatedCost>
    <Officer>William Jones                                     </Officer>
    <DADays>12</DADays>
    <ApplicationIdS>645828</ApplicationIdS>
    <Address>
      <PropertyId>303027</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>303027</GeocodeId>
      <ApplicationId>645828</ApplicationId>
      <Line1>302 Clovelly RoadCLOVELLY  NSW  2031                                                               </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645828</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>133763</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>OWEN</FamilyName>
      <GivenName>GLENDA </GivenName>
      <Initial>G    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs G Owen</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468469</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GILROY</FamilyName>
      <GivenName>JAMES ROBERT</GivenName>
      <Initial>JR   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J R Gilroy</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>461001</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>GILROY</FamilyName>
      <GivenName>JESSICA MARY</GivenName>
      <Initial>JM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs J M Gilroy</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>288153</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468469</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GILROY</FamilyName>
      <GivenName>JAMES ROBERT</GivenName>
      <Initial>JR   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J R Gilroy</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>461001</PartyId>
      <ApplicationId>645828</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>GILROY</FamilyName>
      <GivenName>JESSICA MARY</GivenName>
      <Initial>JM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs J M Gilroy</FullName>
      <ApplicationIdS>645828</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645828</ApplicationId>
      <ApplicationIdS>645828</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645758</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/297/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>297</ReferenceNumberNumber>
    <ApplicationDetails>Construction of swimming pool, landscaping and associated works to rear of existing dwelling (Heritage Conservation Area).</ApplicationDetails>
    <CreatedDate>2019-06-03T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>90000.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>7</DADays>
    <ApplicationIdS>645758</ApplicationIdS>
    <Address>
      <PropertyId>304065</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>304065</GeocodeId>
      <ApplicationId>645758</ApplicationId>
      <Line1>18 Dangar StreetRANDWICK  NSW  2031                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645758</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>409909</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>FOGARTY</FamilyName>
      <GivenName>RICHARD ALEXANDER</GivenName>
      <Initial>RA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr R A Fogarty</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>409908</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MEE</FamilyName>
      <GivenName>MELISSA STEPHANIE</GivenName>
      <Initial>MSA  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs M S A Mee</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>426940</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MICHAEL CUMMING ARCHITECTS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Michael Cumming Architects Pty Ltd</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>288153</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>409909</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>FOGARTY</FamilyName>
      <GivenName>RICHARD ALEXANDER</GivenName>
      <Initial>RA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr R A Fogarty</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>409908</PartyId>
      <ApplicationId>645758</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MEE</FamilyName>
      <GivenName>MELISSA STEPHANIE</GivenName>
      <Initial>MSA  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs M S A Mee</FullName>
      <ApplicationIdS>645758</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645758</ApplicationId>
      <ApplicationIdS>645758</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646108</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/296/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>296</ReferenceNumberNumber>
    <ApplicationDetails>Construction of shade sail over part of existing playground.</ApplicationDetails>
    <CreatedDate>2019-06-03T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>28325.000000</EstimatedCost>
    <Officer>Perry Head                                        </Officer>
    <DADays>7</DADays>
    <ApplicationIdS>646108</ApplicationIdS>
    <Address>
      <PropertyId>323134</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>323134</GeocodeId>
      <ApplicationId>646108</ApplicationId>
      <Line1>2-10R Brompton RoadKENSINGTON  NSW  2033                                                           </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646108</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>71943</PartyId>
      <ApplicationId>646108</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>BOLTON</FamilyName>
      <GivenName>CHRISTOPHER FRANKS</GivenName>
      <Initial>CF   </Initial>
      <NameType>P</NameType>
      <FullName>Mr C F Bolton</FullName>
      <ApplicationIdS>646108</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468843</PartyId>
      <ApplicationId>646108</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RALEIGH PARK COMMUNITY ASSOCIATION</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Raleigh Park Community Association</FullName>
      <ApplicationIdS>646108</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646108</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646108</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>169706</PartyId>
      <ApplicationId>646108</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RALEIGH PARK COMMUNITY ASSOCIATION</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Raleigh Park Community Association</FullName>
      <ApplicationIdS>646108</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646108</ApplicationId>
      <ApplicationIdS>646108</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646093</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/295/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>295</ReferenceNumberNumber>
    <ApplicationDetails>Relocation of existing shed adjacent to rear boundary, construction of swimming pool to rear of existing dwelling, landscaping, fencing and associated works.</ApplicationDetails>
    <CreatedDate>2019-06-03T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-06-03T00:00:00+10:00</LodgementDate>
    <EstimatedCost>188255.000000</EstimatedCost>
    <Officer>Jayden Perry                                      </Officer>
    <DADays>7</DADays>
    <ApplicationIdS>646093</ApplicationIdS>
    <Address>
      <PropertyId>314823</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>314823</GeocodeId>
      <ApplicationId>646093</ApplicationId>
      <Line1>8 Nolan AvenueCLOVELLY  NSW  2031                                                                  </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>646093</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>291664</PartyId>
      <ApplicationId>646093</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GOLDSTONE</FamilyName>
      <GivenName>RUTH </GivenName>
      <Initial>R    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs R Goldstone</FullName>
      <ApplicationIdS>646093</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>431067</PartyId>
      <ApplicationId>646093</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HARRISONS LANDSCAPING</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Harrison's Landscaping</FullName>
      <ApplicationIdS>646093</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646093</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646093</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>415140</PartyId>
      <ApplicationId>646093</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>BOYLE</FamilyName>
      <GivenName>CHARLES JONATHAN</GivenName>
      <Initial>CJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr C J Boyle</FullName>
      <ApplicationIdS>646093</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>415141</PartyId>
      <ApplicationId>646093</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>BOYLE</FamilyName>
      <GivenName>LYDIA JANE</GivenName>
      <Initial>LJW  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs L J W Boyle</FullName>
      <ApplicationIdS>646093</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646093</ApplicationId>
      <ApplicationIdS>646093</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646074</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/294/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>294</ReferenceNumberNumber>
    <ApplicationDetails>Use of existing garage roof as balcony, construction of roof over balcony plus privacy screens and balustrades with associated works.</ApplicationDetails>
    <CreatedDate>2019-05-31T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-31T00:00:00+10:00</LodgementDate>
    <EstimatedCost>17500.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>10</DADays>
    <ApplicationIdS>646074</ApplicationIdS>
    <Address>
      <PropertyId>320692</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>320692</GeocodeId>
      <ApplicationId>646074</ApplicationId>
      <Line1>20 Yarra RoadPHILLIP BAY  NSW  2036                                                                </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646074</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>380468</PartyId>
      <ApplicationId>646074</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HOW</FamilyName>
      <GivenName>SOW LENG</GivenName>
      <Initial>SL   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S L How</FullName>
      <ApplicationIdS>646074</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>380469</PartyId>
      <ApplicationId>646074</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>LIM</FamilyName>
      <GivenName>MENG LONG</GivenName>
      <Initial>ML   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M L Lim</FullName>
      <ApplicationIdS>646074</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>145885</PartyId>
      <ApplicationId>646074</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SPITERI</FamilyName>
      <GivenName>JOHN </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Spiteri</FullName>
      <ApplicationIdS>646074</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646074</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646074</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>71548</PartyId>
      <ApplicationId>646074</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MACKENNA</FamilyName>
      <GivenName>WAYNE TREVOR</GivenName>
      <Initial>WT   </Initial>
      <NameType>P</NameType>
      <FullName>Mr W T McKenna</FullName>
      <ApplicationIdS>646074</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646074</ApplicationId>
      <ApplicationIdS>646074</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646056</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/293/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>293</ReferenceNumberNumber>
    <ApplicationDetails>Demolition of existing garage, ground and first floor alterations and additions to existing dwelling, construction of new garage adjacent to northern boundary, decking and awning to rear with associated works (Heritage conservation area).</ApplicationDetails>
    <CreatedDate>2019-05-31T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-31T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1028182.000000</EstimatedCost>
    <Officer>Angela Manahan                                    </Officer>
    <DADays>10</DADays>
    <ApplicationIdS>646056</ApplicationIdS>
    <Address>
      <PropertyId>319655</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>319655</GeocodeId>
      <ApplicationId>646056</ApplicationId>
      <Line1>30 Virginia StreetKENSINGTON  NSW  2033                                                            </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646056</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>379771</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GIRGIS</FamilyName>
      <GivenName>LAILA </GivenName>
      <Initial>L    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs L Girgis</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>379772</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>TADROS</FamilyName>
      <GivenName>SHERIF FIKRY</GivenName>
      <Initial>SF   </Initial>
      <NameType>P</NameType>
      <FullName>Mr S F Tadros</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>246584</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>DUNKLEY</FamilyName>
      <GivenName>PETER </GivenName>
      <Initial>P    </Initial>
      <NameType>P</NameType>
      <FullName>Mr P Dunkley</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>274605</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>VERTZYAS</FamilyName>
      <GivenName>CALYPSO CATHY</GivenName>
      <Initial>CC   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C C Vertzyas</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>274604</PartyId>
      <ApplicationId>646056</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VERTZYAS</FamilyName>
      <GivenName>NICK DENNIS</GivenName>
      <Initial>ND   </Initial>
      <NameType>P</NameType>
      <FullName>Dr N D Vertzyas</FullName>
      <ApplicationIdS>646056</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646056</ApplicationId>
      <ApplicationIdS>646056</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646047</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/292/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>292</ReferenceNumberNumber>
    <ApplicationDetails>Demolition of existing structures, construction of 3 storey attached dual occupancy plus car lift, swimming pools to rear, landscaping and associated works (variation to height control).</ApplicationDetails>
    <CreatedDate>2019-05-31T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-31T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1595820.000000</EstimatedCost>
    <Officer>Chahrazad Rahe                                    </Officer>
    <DADays>10</DADays>
    <ApplicationIdS>646047</ApplicationIdS>
    <Address>
      <PropertyId>312052</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>312052</GeocodeId>
      <ApplicationId>646047</ApplicationId>
      <Line1>285 Malabar RoadMAROUBRA  NSW  2035                                                                </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>646047</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>413649</PartyId>
      <ApplicationId>646047</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ATTENA GROUP PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Attena Group Pty Ltd</FullName>
      <ApplicationIdS>646047</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646047</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646047</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>139891</PartyId>
      <ApplicationId>646047</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>FOLEY</FamilyName>
      <GivenName>PETER DOUGLAS</GivenName>
      <Initial>PD   </Initial>
      <NameType>P</NameType>
      <FullName>Mr P D Foley</FullName>
      <ApplicationIdS>646047</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646047</ApplicationId>
      <ApplicationIdS>646047</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646036</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/755/2018B</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>755</ReferenceNumberNumber>
    <Amendment>B</Amendment>
    <ApplicationDetails>Modification to approved development to change cost of works to $75,000.00 Original consent: Construction of first floor secondary dwelling above existing garage fronting Court Ave.</ApplicationDetails>
    <CreatedDate>2019-05-30T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-30T00:00:00+10:00</LodgementDate>
    <EstimatedCost>150000.000000</EstimatedCost>
    <Officer>Veronique Hoffman                                 </Officer>
    <DADays>11</DADays>
    <ApplicationIdS>646036</ApplicationIdS>
    <Address>
      <PropertyId>304862</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>304862</GeocodeId>
      <ApplicationId>646036</ApplicationId>
      <Line1>211 Doncaster AvenueKINGSFORD  NSW  2032                                                           </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646036</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>243372</PartyId>
      <ApplicationId>646036</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CROKE</FamilyName>
      <GivenName>JOHN FRANCIS</GivenName>
      <Initial>JF   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J F Croke</FullName>
      <ApplicationIdS>646036</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>32284</PartyId>
      <ApplicationId>646036</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CASIMATIS</FamilyName>
      <GivenName>HARRY </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mr H Casimatis</FullName>
      <ApplicationIdS>646036</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646036</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646036</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>32284</PartyId>
      <ApplicationId>646036</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CASIMATIS</FamilyName>
      <GivenName>HARRY </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mr H Casimatis</FullName>
      <ApplicationIdS>646036</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646036</ApplicationId>
      <ApplicationIdS>646036</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646042</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/291/2019</ReferenceNumber>
    <Status>Under Assessment</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>291</ReferenceNumberNumber>
    <ApplicationDetails>Torrens title subdivision of an existing approved dual occupancy.</ApplicationDetails>
    <CreatedDate>2019-05-30T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-30T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Perry Head                                        </Officer>
    <DADays>11</DADays>
    <ApplicationIdS>646042</ApplicationIdS>
    <Address>
      <PropertyId>320804</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>320804</GeocodeId>
      <ApplicationId>646042</ApplicationId>
      <Line1>9-9A Zions AvenueMALABAR  NSW  2036                                                                </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>646042</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>40105</PartyId>
      <ApplicationId>646042</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>OREILLY</FamilyName>
      <GivenName>JOHN ANTHONY</GivenName>
      <Initial>JA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J A O'Reilly</FullName>
      <ApplicationIdS>646042</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>394493</PartyId>
      <ApplicationId>646042</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>TOOHEY</FamilyName>
      <GivenName>ELLA ROSE</GivenName>
      <Initial>ER   </Initial>
      <NameType>P</NameType>
      <FullName>Ms E R Toohey</FullName>
      <ApplicationIdS>646042</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646042</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646042</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>202432</PartyId>
      <ApplicationId>646042</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>9 ZIONS AVENUE PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>9 Zions Avenue Pty Ltd</FullName>
      <ApplicationIdS>646042</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646042</ApplicationId>
      <ApplicationIdS>646042</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646002</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/290/2019</ReferenceNumber>
    <Status>Awaiting Allocation</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>290</ReferenceNumberNumber>
    <ApplicationDetails>Tree DA - Pruning overhanging branches of tree located at 6 Milroy Ave</ApplicationDetails>
    <CreatedDate>2019-05-30T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-30T00:00:00+10:00</LodgementDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>-                                                 </Officer>
    <DADays>11</DADays>
    <ApplicationIdS>646002</ApplicationIdS>
    <Address>
      <PropertyId>313506</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>313506</GeocodeId>
      <ApplicationId>646002</ApplicationId>
      <Line1>4 Milroy AvenueKENSINGTON  NSW  2033                                                               </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>646002</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>356818</PartyId>
      <ApplicationId>646002</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GEORTSIS</FamilyName>
      <GivenName>JAMES </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Geortsis</FullName>
      <ApplicationIdS>646002</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>442250</PartyId>
      <ApplicationId>646002</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CESSARIO</FamilyName>
      <GivenName>KYLIE ANN</GivenName>
      <Initial>KA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms K A Cessario</FullName>
      <ApplicationIdS>646002</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646002</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646002</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>442249</PartyId>
      <ApplicationId>646002</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CESSARIO</FamilyName>
      <GivenName>JOSEPH ANTHONY</GivenName>
      <Initial>JA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J A Cessario</FullName>
      <ApplicationIdS>646002</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>442250</PartyId>
      <ApplicationId>646002</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>CESSARIO</FamilyName>
      <GivenName>KYLIE ANN</GivenName>
      <Initial>KA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms K A Cessario</FullName>
      <ApplicationIdS>646002</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646002</ApplicationId>
      <ApplicationIdS>646002</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>646001</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/289/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>289</ReferenceNumberNumber>
    <ApplicationDetails>Removal of existing pool and spa and construction of a new pool with decking, landscaping and associated works.</ApplicationDetails>
    <CreatedDate>2019-05-30T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-30T00:00:00+10:00</LodgementDate>
    <EstimatedCost>69950.000000</EstimatedCost>
    <Officer>Veronique Hoffman                                 </Officer>
    <DADays>11</DADays>
    <ApplicationIdS>646001</ApplicationIdS>
    <Address>
      <PropertyId>305568</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>305568</GeocodeId>
      <ApplicationId>646001</ApplicationId>
      <Line1>28 Eastbourne AvenueCLOVELLY  NSW  2031                                                            </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>646001</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>247646</PartyId>
      <ApplicationId>646001</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>TURNER</FamilyName>
      <GivenName>GRAHAM WILLIAM</GivenName>
      <Initial>GW   </Initial>
      <NameType>P</NameType>
      <FullName>Mr G W Turner</FullName>
      <ApplicationIdS>646001</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>268917</PartyId>
      <ApplicationId>646001</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PATTERSON</FamilyName>
      <GivenName>SAMANTHA PRIMROSE</GivenName>
      <Initial>SP   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S P Patterson</FullName>
      <ApplicationIdS>646001</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>646001</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>646001</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>268918</PartyId>
      <ApplicationId>646001</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>PATTERSON</FamilyName>
      <GivenName>MARK WINSTON</GivenName>
      <Initial>MW   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M W Patterson</FullName>
      <ApplicationIdS>646001</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>268917</PartyId>
      <ApplicationId>646001</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PATTERSON</FamilyName>
      <GivenName>SAMANTHA PRIMROSE</GivenName>
      <Initial>SP   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S P Patterson</FullName>
      <ApplicationIdS>646001</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>646001</ApplicationId>
      <ApplicationIdS>646001</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645997</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/288/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>288</ReferenceNumberNumber>
    <ApplicationDetails>Construction of a swimming pool, landscaping and retaining with associated works to rear of existing dwelling.</ApplicationDetails>
    <CreatedDate>2019-05-30T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-30T00:00:00+10:00</LodgementDate>
    <EstimatedCost>80080.000000</EstimatedCost>
    <Officer>Veronique Hoffman                                 </Officer>
    <DADays>11</DADays>
    <ApplicationIdS>645997</ApplicationIdS>
    <Address>
      <PropertyId>317172</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>317172</GeocodeId>
      <ApplicationId>645997</ApplicationId>
      <Line1>58 Ritchard AvenueCOOGEE  NSW  2034                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645997</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>295936</PartyId>
      <ApplicationId>645997</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CHAN</FamilyName>
      <GivenName>LISA WENDY</GivenName>
      <Initial>LW   </Initial>
      <NameType>P</NameType>
      <FullName>Ms L W Chan</FullName>
      <ApplicationIdS>645997</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468660</PartyId>
      <ApplicationId>645997</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CLEMENT</FamilyName>
      <GivenName>GRANT </GivenName>
      <Initial>G    </Initial>
      <NameType>P</NameType>
      <FullName>Mr G Clement</FullName>
      <ApplicationIdS>645997</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645997</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645997</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>326709</PartyId>
      <ApplicationId>645997</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>TOMPKINS</FamilyName>
      <GivenName>KAREN </GivenName>
      <Initial>K    </Initial>
      <NameType>P</NameType>
      <FullName>Ms K Tompkins</FullName>
      <ApplicationIdS>645997</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645997</ApplicationId>
      <ApplicationIdS>645997</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645763</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/727/2017A</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2017</ReferenceNumberYear>
    <ReferenceNumberNumber>727</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to relocation of swimming pools towards rear, and alterations to rear alfresco area and privacy screens. Original consent: Demolition of existing structures, Torrens Title subdivision into 2 lots, construction of 2x3 storey semi-detached dwellings with garages to front, swimming pools to rear, landscaping and associated works.</ApplicationDetails>
    <CreatedDate>2019-05-28T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-28T00:00:00+10:00</LodgementDate>
    <EstimatedCost>668902.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>13</DADays>
    <ApplicationIdS>645763</ApplicationIdS>
    <Address>
      <PropertyId>309969</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>309969</GeocodeId>
      <ApplicationId>645763</ApplicationId>
      <Line1>49 Irvine StreetKINGSFORD  NSW  2032                                                               </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645763</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>140368</PartyId>
      <ApplicationId>645763</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 3523</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 3523</FullName>
      <ApplicationIdS>645763</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>428354</PartyId>
      <ApplicationId>645763</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HUANG</FamilyName>
      <GivenName>HENRY </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mr H Huang</FullName>
      <ApplicationIdS>645763</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645763</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645763</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>429286</PartyId>
      <ApplicationId>645763</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KASTANIAS</FamilyName>
      <GivenName>ARGIRY </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Mr A Kastanias</FullName>
      <ApplicationIdS>645763</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>429287</PartyId>
      <ApplicationId>645763</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>MEXIS</FamilyName>
      <GivenName>ELLIE </GivenName>
      <Initial>E    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs E Mexis</FullName>
      <ApplicationIdS>645763</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645763</ApplicationId>
      <ApplicationIdS>645763</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645794</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/387/2018A</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>387</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development by increase size of rear first floor terrace and construct roof over portion of terrace. Original Consent: Demolition of existing structures, construction of a new 2 storey dwelling with semi-basement garage and associated works.</ApplicationDetails>
    <CreatedDate>2019-05-28T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-28T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1145483.000000</EstimatedCost>
    <Officer>Jayden Perry                                      </Officer>
    <DADays>13</DADays>
    <ApplicationIdS>645794</ApplicationIdS>
    <Address>
      <PropertyId>300664</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>300664</GeocodeId>
      <ApplicationId>645794</ApplicationId>
      <Line1>37 Brook StreetCOOGEE  NSW  2034                                                                   </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645794</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>59083</PartyId>
      <ApplicationId>645794</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LEUZZI</FamilyName>
      <GivenName>ROCCO </GivenName>
      <Initial>R    </Initial>
      <NameType>P</NameType>
      <FullName>Mr R Leuzzi</FullName>
      <ApplicationIdS>645794</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>430323</PartyId>
      <ApplicationId>645794</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>INWOOD</FamilyName>
      <GivenName>BRAD </GivenName>
      <Initial>B    </Initial>
      <NameType>P</NameType>
      <FullName>Mr B Inwood</FullName>
      <ApplicationIdS>645794</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645794</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645794</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>37417</PartyId>
      <ApplicationId>645794</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LIM</FamilyName>
      <GivenName>BENJAMIN PEK</GivenName>
      <Initial>BPK  </Initial>
      <NameType>P</NameType>
      <FullName>Mr B P K Lim</FullName>
      <ApplicationIdS>645794</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>37418</PartyId>
      <ApplicationId>645794</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>LIM</FamilyName>
      <GivenName>SIAN LIAN</GivenName>
      <Initial>SL   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S L Lim</FullName>
      <ApplicationIdS>645794</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645794</ApplicationId>
      <ApplicationIdS>645794</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645782</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/287/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>287</ReferenceNumberNumber>
    <ApplicationDetails>Removal of existing swimming pool, construction of a new pool to rear of existing dwelling, landscaping, changes to fencing and associated works (Heritage Conservation Area).</ApplicationDetails>
    <CreatedDate>2019-05-28T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-28T00:00:00+10:00</LodgementDate>
    <EstimatedCost>46455.000000</EstimatedCost>
    <Officer>Veronique Hoffman                                 </Officer>
    <DADays>13</DADays>
    <ApplicationIdS>645782</ApplicationIdS>
    <Address>
      <PropertyId>311121</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>311121</GeocodeId>
      <ApplicationId>645782</ApplicationId>
      <Line1>7 Lenthall StreetKENSINGTON  NSW  2033                                                             </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645782</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>165885</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LEEMAN</FamilyName>
      <GivenName>BARBARA JEAN</GivenName>
      <Initial>BJ   </Initial>
      <NameType>P</NameType>
      <FullName>Ms B J Leeman</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468514</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>READ</FamilyName>
      <GivenName>CHRISTINE </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C Read</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>468513</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>READ</FamilyName>
      <GivenName>ROGER </GivenName>
      <Initial>R    </Initial>
      <NameType>P</NameType>
      <FullName>Mr R Read</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>57813</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>READ</FamilyName>
      <GivenName>CHRISTINE MURIAL</GivenName>
      <Initial>CM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C M Read</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>57812</PartyId>
      <ApplicationId>645782</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>READ</FamilyName>
      <GivenName>ROGER WAYNE</GivenName>
      <Initial>RW   </Initial>
      <NameType>P</NameType>
      <FullName>Mr R W Read</FullName>
      <ApplicationIdS>645782</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645782</ApplicationId>
      <ApplicationIdS>645782</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645705</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/842/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>842</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:38:23.85+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645705</ApplicationIdS>
    <Determination>
      <ApplicationId>645705</ApplicationId>
      <DeterminationDate>2019-05-29T11:38:23.85+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345486</DecisionId>
      <ApplicationIdS>645705</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348217</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348217</GeocodeId>
      <ApplicationId>645705</ApplicationId>
      <Line1>103T Brook StreetCOOGEE  NSW  2034                                                                 </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645705</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>327534</PartyId>
      <ApplicationId>645705</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HENIS</FamilyName>
      <GivenName>MORDECHAI </GivenName>
      <Initial>M    </Initial>
      <NameType>P</NameType>
      <FullName>M Henis</FullName>
      <ApplicationIdS>645705</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>327535</PartyId>
      <ApplicationId>645705</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>HENIS</FamilyName>
      <GivenName>RAEWYN MAE</GivenName>
      <Initial>RM   </Initial>
      <NameType>P</NameType>
      <FullName>R M Henis</FullName>
      <ApplicationIdS>645705</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645705</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645705</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645705</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645705</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>371310</PartyId>
      <ApplicationId>645705</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LLOYD ROTHSCHILD PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Lloyd Rothschild Pty Ltd</FullName>
      <ApplicationIdS>645705</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645705</ApplicationId>
      <ApplicationIdS>645705</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645704</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/841/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>841</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:34:42.23+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645704</ApplicationIdS>
    <Determination>
      <ApplicationId>645704</ApplicationId>
      <DeterminationDate>2019-05-29T11:34:42.23+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345485</DecisionId>
      <ApplicationIdS>645704</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>296073</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>296073</GeocodeId>
      <ApplicationId>645704</ApplicationId>
      <Line1>1-3 Elizabeth StreetRANDWICK  NSW  2031                                                            </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645704</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>329009</PartyId>
      <ApplicationId>645704</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUTTON</FamilyName>
      <GivenName>GREGORY JOHN</GivenName>
      <Initial>GJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr G J Sutton</FullName>
      <ApplicationIdS>645704</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>329010</PartyId>
      <ApplicationId>645704</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>SUTTON</FamilyName>
      <GivenName>SHARON MAREE</GivenName>
      <Initial>SM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs S M Sutton</FullName>
      <ApplicationIdS>645704</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645704</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645704</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645704</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645704</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>28438</PartyId>
      <ApplicationId>645704</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK LABOR CLUB LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick Labor Club Ltd</FullName>
      <ApplicationIdS>645704</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645704</ApplicationId>
      <ApplicationIdS>645704</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645703</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/840/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>840</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:31:16.52+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645703</ApplicationIdS>
    <Determination>
      <ApplicationId>645703</ApplicationId>
      <DeterminationDate>2019-05-29T11:31:16.52+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345481</DecisionId>
      <ApplicationIdS>645703</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>302906</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>302906</GeocodeId>
      <ApplicationId>645703</ApplicationId>
      <Line1>159 Clovelly RoadRANDWICK  NSW  2031                                                               </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645703</ApplicationIdS>
    </Address>
    <Address>
      <PropertyId>302903</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>302903</GeocodeId>
      <ApplicationId>645703</ApplicationId>
      <Line1>157 Clovelly RoadRANDWICK  NSW  2031                                                               </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645703</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>337545</PartyId>
      <ApplicationId>645703</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>POULOS</FamilyName>
      <GivenName>CARREE MARIA</GivenName>
      <Initial>CMT  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C M T Poulos</FullName>
      <ApplicationIdS>645703</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>337544</PartyId>
      <ApplicationId>645703</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>POULOS</FamilyName>
      <GivenName>THEO NICHOLAS</GivenName>
      <Initial>TN   </Initial>
      <NameType>P</NameType>
      <FullName>Mr T N Poulos</FullName>
      <ApplicationIdS>645703</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645703</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645703</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645703</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645703</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>147881</PartyId>
      <ApplicationId>645703</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>STEWART</FamilyName>
      <GivenName>JAMES BERESFORD</GivenName>
      <Initial>JB   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J B Stewart</FullName>
      <ApplicationIdS>645703</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645703</ApplicationId>
      <ApplicationIdS>645703</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645702</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/839/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>839</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T13:27:53.02+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645702</ApplicationIdS>
    <Determination>
      <ApplicationId>645702</ApplicationId>
      <DeterminationDate>2019-05-29T13:27:53.02+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345495</DecisionId>
      <ApplicationIdS>645702</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>296018</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>296018</GeocodeId>
      <ApplicationId>645702</ApplicationId>
      <Line1>32 Alison RoadRANDWICK  NSW  2031                                                                  </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645702</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>321292</PartyId>
      <ApplicationId>645702</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 83641</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 83641</FullName>
      <ApplicationIdS>645702</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645702</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645702</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645702</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645702</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>387016</PartyId>
      <ApplicationId>645702</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>IRVING</FamilyName>
      <GivenName>ANDREW MICHAEL</GivenName>
      <Initial>AM   </Initial>
      <NameType>P</NameType>
      <FullName>Mr A M Irving</FullName>
      <ApplicationIdS>645702</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>387017</PartyId>
      <ApplicationId>645702</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>RUSHBY</FamilyName>
      <GivenName>JACQUELINE ANN</GivenName>
      <Initial>JA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms J A Rushby</FullName>
      <ApplicationIdS>645702</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645702</ApplicationId>
      <ApplicationIdS>645702</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645700</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/838/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>838</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:56:36.6+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645700</ApplicationIdS>
    <Determination>
      <ApplicationId>645700</ApplicationId>
      <DeterminationDate>2019-05-29T11:56:36.6+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345492</DecisionId>
      <ApplicationIdS>645700</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348207</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348207</GeocodeId>
      <ApplicationId>645700</ApplicationId>
      <Line1>50T Carrington RoadRANDWICK  NSW  2031                                                             </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645700</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>31997</PartyId>
      <ApplicationId>645700</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HANCE</FamilyName>
      <GivenName>THOMAS SCOTT</GivenName>
      <Initial>TS   </Initial>
      <NameType>P</NameType>
      <FullName>Dr T S Hance</FullName>
      <ApplicationIdS>645700</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645700</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645700</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645700</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645700</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>140478</PartyId>
      <ApplicationId>645700</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 13485</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 13485</FullName>
      <ApplicationIdS>645700</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645700</ApplicationId>
      <ApplicationIdS>645700</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645699</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/837/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>837</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:53:13.89+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645699</ApplicationIdS>
    <Determination>
      <ApplicationId>645699</ApplicationId>
      <DeterminationDate>2019-05-29T11:53:13.89+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345491</DecisionId>
      <ApplicationIdS>645699</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>312482</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>312482</GeocodeId>
      <ApplicationId>645699</ApplicationId>
      <Line1>1-7 Maroubra RoadMAROUBRA  NSW  2035                                                               </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645699</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>283186</PartyId>
      <ApplicationId>645699</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HODGKINS</FamilyName>
      <GivenName>ADAM JOSE</GivenName>
      <Initial>AJ   </Initial>
      <NameType>P</NameType>
      <FullName>Dr A J Hodgkins</FullName>
      <ApplicationIdS>645699</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>283187</PartyId>
      <ApplicationId>645699</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>HODGKINS</FamilyName>
      <GivenName>LIZAJANE </GivenName>
      <Initial>L    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs L Hodgkins</FullName>
      <ApplicationIdS>645699</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645699</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645699</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645699</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645699</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>388464</PartyId>
      <ApplicationId>645699</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RJIM PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Rjim Pty Ltd</FullName>
      <ApplicationIdS>645699</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645699</ApplicationId>
      <ApplicationIdS>645699</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645697</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/836/2018B</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>836</ReferenceNumberNumber>
    <Amendment>B</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:44:23.45+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645697</ApplicationIdS>
    <Determination>
      <ApplicationId>645697</ApplicationId>
      <DeterminationDate>2019-05-29T11:44:23.45+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345489</DecisionId>
      <ApplicationIdS>645697</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>303002</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>303002</GeocodeId>
      <ApplicationId>645697</ApplicationId>
      <Line1>272-282 Clovelly RoadCOOGEE  NSW  2034                                                             </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645697</ApplicationIdS>
    </Address>
    <Address>
      <PropertyId>348215</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348215</GeocodeId>
      <ApplicationId>645697</ApplicationId>
      <Line1>280T Clovelly RoadCOOGEE  NSW  2034                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645697</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>138248</PartyId>
      <ApplicationId>645697</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GILLIIES</FamilyName>
      <GivenName>ROBERT BRUCE</GivenName>
      <Initial>RB   </Initial>
      <NameType>P</NameType>
      <FullName>Mr R B Gilliies</FullName>
      <ApplicationIdS>645697</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645697</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645697</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645697</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645697</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>408226</PartyId>
      <ApplicationId>645697</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>AKRLS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>AKRLS PTY LTD</FullName>
      <ApplicationIdS>645697</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>408227</PartyId>
      <ApplicationId>645697</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>TKRLS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>TKRLS PTY LTD</FullName>
      <ApplicationIdS>645697</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645697</ApplicationId>
      <ApplicationIdS>645697</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645693</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/835/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>835</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:40:39.02+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645693</ApplicationIdS>
    <Determination>
      <ApplicationId>645693</ApplicationId>
      <DeterminationDate>2019-05-29T11:40:39.02+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345487</DecisionId>
      <ApplicationIdS>645693</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>303313</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>303313</GeocodeId>
      <ApplicationId>645693</ApplicationId>
      <Line1>180-196 Coogee Bay RoadCOOGEE  NSW  2034                                                           </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645693</ApplicationIdS>
    </Address>
    <Address>
      <PropertyId>303317</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>303317</GeocodeId>
      <ApplicationId>645693</ApplicationId>
      <Line1>199 Coogee Bay RoadCOOGEE  NSW  2034                                                               </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645693</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>336568</PartyId>
      <ApplicationId>645693</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>TOWNSEND</FamilyName>
      <GivenName>DARRYL CRAIG</GivenName>
      <Initial>DC   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D C Townsend</FullName>
      <ApplicationIdS>645693</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645693</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645693</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645693</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645693</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>303851</PartyId>
      <ApplicationId>645693</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 22899</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 22899</FullName>
      <ApplicationIdS>645693</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645693</ApplicationId>
      <ApplicationIdS>645693</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645682</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/834/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>834</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:32:58+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645682</ApplicationIdS>
    <Determination>
      <ApplicationId>645682</ApplicationId>
      <DeterminationDate>2019-05-29T11:32:58+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345483</DecisionId>
      <ApplicationIdS>645682</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348218</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348218</GeocodeId>
      <ApplicationId>645682</ApplicationId>
      <Line1>157T Dolphin StreetCOOGEE  NSW  2034                                                               </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645682</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>138583</PartyId>
      <ApplicationId>645682</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 5434</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 5434</FullName>
      <ApplicationIdS>645682</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645682</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645682</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645682</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645682</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>205352</PartyId>
      <ApplicationId>645682</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 67452</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 67452</FullName>
      <ApplicationIdS>645682</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645682</ApplicationId>
      <ApplicationIdS>645682</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645681</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/833/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>833</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:28:31.97+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645681</ApplicationIdS>
    <Determination>
      <ApplicationId>645681</ApplicationId>
      <DeterminationDate>2019-05-29T11:28:31.97+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345480</DecisionId>
      <ApplicationIdS>645681</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>297635</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>297635</GeocodeId>
      <ApplicationId>645681</ApplicationId>
      <Line1>238-246 Arden StreetCOOGEE  NSW  2034                                                              </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645681</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>366049</PartyId>
      <ApplicationId>645681</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>REN</FamilyName>
      <GivenName>JIE </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Ren</FullName>
      <ApplicationIdS>645681</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645681</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645681</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645681</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645681</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>410783</PartyId>
      <ApplicationId>645681</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MAP CAPITAL PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>MAP Capital Pty Ltd</FullName>
      <ApplicationIdS>645681</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645681</ApplicationId>
      <ApplicationIdS>645681</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645680</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/832/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>832</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:23:49.05+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645680</ApplicationIdS>
    <Determination>
      <ApplicationId>645680</ApplicationId>
      <DeterminationDate>2019-05-29T11:23:49.05+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345478</DecisionId>
      <ApplicationIdS>645680</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>349871</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>349871</GeocodeId>
      <ApplicationId>645680</ApplicationId>
      <Line1>219T Clovelly RoadRANDWICK  NSW  2031                                                              </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645680</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>372217</PartyId>
      <ApplicationId>645680</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PARKER</FamilyName>
      <GivenName>RODERICK WILLIAM</GivenName>
      <Initial>RWM  </Initial>
      <NameType>P</NameType>
      <FullName>Mr R W M Parker</FullName>
      <ApplicationIdS>645680</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645680</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645680</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645680</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645680</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>324392</PartyId>
      <ApplicationId>645680</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>MORGAN</FamilyName>
      <GivenName>WILLIAM JAMES</GivenName>
      <Initial>WJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr W J Morgan</FullName>
      <ApplicationIdS>645680</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>324391</PartyId>
      <ApplicationId>645680</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PARKER</FamilyName>
      <GivenName>SARAH JANE</GivenName>
      <Initial>SJ   </Initial>
      <NameType>P</NameType>
      <FullName>Ms S J Parker</FullName>
      <ApplicationIdS>645680</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645680</ApplicationId>
      <ApplicationIdS>645680</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645679</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/831/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>831</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:16:12.41+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645679</ApplicationIdS>
    <Determination>
      <ApplicationId>645679</ApplicationId>
      <DeterminationDate>2019-05-29T11:16:12.41+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345470</DecisionId>
      <ApplicationIdS>645679</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348221</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348221</GeocodeId>
      <ApplicationId>645679</ApplicationId>
      <Line1>1218T Anzac ParadeMALABAR  NSW  2036                                                               </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>645679</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>250623</PartyId>
      <ApplicationId>645679</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MACMILLAN</FamilyName>
      <GivenName>JANE ALEXANDRA</GivenName>
      <Initial>JA   </Initial>
      <NameType>P</NameType>
      <FullName>Ms J A McMillan</FullName>
      <ApplicationIdS>645679</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645679</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645679</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645679</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645679</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>345302</PartyId>
      <ApplicationId>645679</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645679</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645679</ApplicationId>
      <ApplicationIdS>645679</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645678</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/830/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>830</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:19:50.72+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645678</ApplicationIdS>
    <Determination>
      <ApplicationId>645678</ApplicationId>
      <DeterminationDate>2019-05-29T11:19:50.72+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345476</DecisionId>
      <ApplicationIdS>645678</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>349875</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>349875</GeocodeId>
      <ApplicationId>645678</ApplicationId>
      <Line1>307T Malabar RoadMAROUBRA  NSW  2035                                                               </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645678</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>31644</PartyId>
      <ApplicationId>645678</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KNOX</FamilyName>
      <GivenName>DAVID JOHN</GivenName>
      <Initial>DJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D J Knox</FullName>
      <ApplicationIdS>645678</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645678</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645678</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645678</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645678</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>277123</PartyId>
      <ApplicationId>645678</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LIU</FamilyName>
      <GivenName>MELISSA XU</GivenName>
      <Initial>MX   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs M X Liu</FullName>
      <ApplicationIdS>645678</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645678</ApplicationId>
      <ApplicationIdS>645678</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645676</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/829/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>829</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T10:44:05.34+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645676</ApplicationIdS>
    <Determination>
      <ApplicationId>645676</ApplicationId>
      <DeterminationDate>2019-05-29T10:44:05.34+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345439</DecisionId>
      <ApplicationIdS>645676</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348220</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348220</GeocodeId>
      <ApplicationId>645676</ApplicationId>
      <Line1>1203T Anzac ParadeMATRAVILLE  NSW  2036                                                            </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>645676</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>416026</PartyId>
      <ApplicationId>645676</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PRIHARDINI</FamilyName>
      <GivenName>DINAR DHAMMA</GivenName>
      <Initial>DD   </Initial>
      <NameType>P</NameType>
      <FullName>Ms D D Prihardini</FullName>
      <ApplicationIdS>645676</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645676</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645676</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645676</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645676</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645676</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645676</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645676</ApplicationId>
      <ApplicationIdS>645676</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645670</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/828/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>828</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T10:50:25.51+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645670</ApplicationIdS>
    <Determination>
      <ApplicationId>645670</ApplicationId>
      <DeterminationDate>2019-05-29T10:50:25.51+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345441</DecisionId>
      <ApplicationIdS>645670</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>350145</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>350145</GeocodeId>
      <ApplicationId>645670</ApplicationId>
      <Line1>204-230 Marine ParadeMAROUBRA  NSW  2035                                                           </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645670</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>159312</PartyId>
      <ApplicationId>645670</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SUKKAR AND SONS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Sukkar and Sons Pty Ltd</FullName>
      <ApplicationIdS>645670</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645670</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645670</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645670</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645670</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>171935</PartyId>
      <ApplicationId>645670</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>MAROUBRA SEALS SPORTS AND COMMUNITY CLUB LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Maroubra Seals Sports and Community Club Ltd</FullName>
      <ApplicationIdS>645670</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645670</ApplicationId>
      <ApplicationIdS>645670</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645667</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/827/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>827</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T10:53:53.74+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645667</ApplicationIdS>
    <Determination>
      <ApplicationId>645667</ApplicationId>
      <DeterminationDate>2019-05-29T10:53:53.74+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345442</DecisionId>
      <ApplicationIdS>645667</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>350300</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>350300</GeocodeId>
      <ApplicationId>645667</ApplicationId>
      <Line1>260-266 Coogee Bay RoadCOOGEE  NSW  2034                                                           </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645667</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>158745</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>CAMPBELL</FamilyName>
      <GivenName>DONNA ELIZABETH</GivenName>
      <Initial>DE   </Initial>
      <NameType>P</NameType>
      <FullName>Ms D E Campbell</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>158744</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SPEER</FamilyName>
      <GivenName>MILTON SAMUEL</GivenName>
      <Initial>MS   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M S Speer</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>316806</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>3</Sequence>
      <FamilyName>KRASSAS</FamilyName>
      <GivenName>GEORGE MICHAEL</GivenName>
      <Initial>GM   </Initial>
      <NameType>P</NameType>
      <FullName>Mr G M Krassas</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>316804</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>KRASSAS</FamilyName>
      <GivenName>KATHLEEN </GivenName>
      <Initial>K    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs K Krassas</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>316805</PartyId>
      <ApplicationId>645667</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>PAPANIKOLAOU</FamilyName>
      <GivenName>MARIA </GivenName>
      <Initial>M    </Initial>
      <NameType>P</NameType>
      <FullName>Ms M Papanikolaou</FullName>
      <ApplicationIdS>645667</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645667</ApplicationId>
      <ApplicationIdS>645667</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645663</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/826/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>826</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T10:57:55.17+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645663</ApplicationIdS>
    <Determination>
      <ApplicationId>645663</ApplicationId>
      <DeterminationDate>2019-05-29T10:57:55.17+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345443</DecisionId>
      <ApplicationIdS>645663</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>349884</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>349884</GeocodeId>
      <ApplicationId>645663</ApplicationId>
      <Line1>2T St Marks RoadRANDWICK  NSW  2031                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645663</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>26772</PartyId>
      <ApplicationId>645663</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>LAHOOD INVESTMENTS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Lahood Investments Pty Ltd</FullName>
      <ApplicationIdS>645663</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645663</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645663</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645663</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645663</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>241672</PartyId>
      <ApplicationId>645663</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>VARVARESSOS</FamilyName>
      <GivenName>CHRISTINE </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Ms C Varvaressos</FullName>
      <ApplicationIdS>645663</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>49303</PartyId>
      <ApplicationId>645663</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VARVARESSOS</FamilyName>
      <GivenName>HARRY </GivenName>
      <Initial>H    </Initial>
      <NameType>P</NameType>
      <FullName>Mr H Varvaressos</FullName>
      <ApplicationIdS>645663</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645663</ApplicationId>
      <ApplicationIdS>645663</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645661</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/825/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>825</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:01:43.91+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645661</ApplicationIdS>
    <Determination>
      <ApplicationId>645661</ApplicationId>
      <DeterminationDate>2019-05-29T11:01:43.91+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345454</DecisionId>
      <ApplicationIdS>645661</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348212</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348212</GeocodeId>
      <ApplicationId>645661</ApplicationId>
      <Line1>222T Clovelly RoadCOOGEE  NSW  2034                                                                </Line1>
      <Line2 />
      <Ward>North                                             </Ward>
      <ApplicationIdS>645661</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>156904</PartyId>
      <ApplicationId>645661</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>HUNT</FamilyName>
      <GivenName>CAROL ANN</GivenName>
      <Initial>CA   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C A Hunt</FullName>
      <ApplicationIdS>645661</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>156903</PartyId>
      <ApplicationId>645661</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HUNT</FamilyName>
      <GivenName>ROBERT JOHN</GivenName>
      <Initial>RJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr R J Hunt</FullName>
      <ApplicationIdS>645661</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645661</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645661</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645661</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645661</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>149266</PartyId>
      <ApplicationId>645661</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 53102</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 53102</FullName>
      <ApplicationIdS>645661</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645661</ApplicationId>
      <ApplicationIdS>645661</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645651</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/824/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>824</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:05:03.67+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645651</ApplicationIdS>
    <Determination>
      <ApplicationId>645651</ApplicationId>
      <DeterminationDate>2019-05-29T11:05:03.67+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345455</DecisionId>
      <ApplicationIdS>645651</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>348205</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>348205</GeocodeId>
      <ApplicationId>645651</ApplicationId>
      <Line1>51T Bunnerong RoadKINGSFORD  NSW  2032                                                             </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645651</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>159295</PartyId>
      <ApplicationId>645651</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NGUYEN</FamilyName>
      <GivenName>DAVID HUNGANH</GivenName>
      <Initial>DH   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D H Nguyen</FullName>
      <ApplicationIdS>645651</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>159296</PartyId>
      <ApplicationId>645651</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>NGUYEN</FamilyName>
      <GivenName>JULIANA NGOC</GivenName>
      <Initial>JN   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs J N Nguyen</FullName>
      <ApplicationIdS>645651</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645651</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645651</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645651</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645651</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>26595</PartyId>
      <ApplicationId>645651</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NSW LAND AND HOUSING CORPORATION</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>NSW Land and Housing Corporation</FullName>
      <ApplicationIdS>645651</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645651</ApplicationId>
      <ApplicationIdS>645651</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645649</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/823/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>823</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra’s payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:12:59.31+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645649</ApplicationIdS>
    <Determination>
      <ApplicationId>645649</ApplicationId>
      <DeterminationDate>2019-05-29T11:12:59.31+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345469</DecisionId>
      <ApplicationIdS>645649</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>362107</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>362107</GeocodeId>
      <ApplicationId>645649</ApplicationId>
      <Line1>112-124 Anzac ParadeKENSINGTON  NSW  2033                                                          </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645649</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>156908</PartyId>
      <ApplicationId>645649</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>GIALOURIS</FamilyName>
      <GivenName>ELIZABETH MARY</GivenName>
      <Initial>EM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs E M Gialouris</FullName>
      <ApplicationIdS>645649</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>156907</PartyId>
      <ApplicationId>645649</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>GIALOURIS</FamilyName>
      <GivenName>PETER JOHN</GivenName>
      <Initial>PJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr P J Gialouris</FullName>
      <ApplicationIdS>645649</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645649</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645649</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645649</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645649</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>364187</PartyId>
      <ApplicationId>645649</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 87347</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 87347</FullName>
      <ApplicationIdS>645649</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645649</ApplicationId>
      <ApplicationIdS>645649</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645647</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/820/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>820</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra's payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:25:03.24+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645647</ApplicationIdS>
    <Determination>
      <ApplicationId>645647</ApplicationId>
      <DeterminationDate>2019-05-29T11:25:03.24+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345479</DecisionId>
      <ApplicationIdS>645647</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>323657</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>323657</GeocodeId>
      <ApplicationId>645647</ApplicationId>
      <Line1>205 Maroubra RoadMAROUBRA  NSW  2035                                                               </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645647</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>384351</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>AMENTAS</FamilyName>
      <GivenName>PAUL </GivenName>
      <Initial>P    </Initial>
      <NameType>P</NameType>
      <FullName>Mr P Amentas</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>384350</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>INGRAM</FamilyName>
      <GivenName>RACHAEL LEE</GivenName>
      <Initial>RL   </Initial>
      <NameType>P</NameType>
      <FullName>Ms R L Ingram</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>361928</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>BUILT DEVELOPMENTS PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Built Developments Pty Ltd</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>412894</PartyId>
      <ApplicationId>645647</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>THE OWNERS STATA PLAN NO 93122 &amp; DP 1183202</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Stata Plan No. 93122 &amp; DP 1183202</FullName>
      <ApplicationIdS>645647</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645647</ApplicationId>
      <ApplicationIdS>645647</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645634</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/819/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>819</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra's payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:21:30.91+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645634</ApplicationIdS>
    <Determination>
      <ApplicationId>645634</ApplicationId>
      <DeterminationDate>2019-05-29T11:21:30.91+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345477</DecisionId>
      <ApplicationIdS>645634</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>356563</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>356563</GeocodeId>
      <ApplicationId>645634</ApplicationId>
      <Line1>178-182R Marine ParadeMAROUBRA  NSW  2035                                                          </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645634</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>371503</PartyId>
      <ApplicationId>645634</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>DEVINE</FamilyName>
      <GivenName>EAMONN ANTHONY</GivenName>
      <Initial>EA   </Initial>
      <NameType>P</NameType>
      <FullName>Mr E A Devine</FullName>
      <ApplicationIdS>645634</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>371504</PartyId>
      <ApplicationId>645634</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>DEVINE</FamilyName>
      <GivenName>KAREN MAREE</GivenName>
      <Initial>KM   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs K M Devine</FullName>
      <ApplicationIdS>645634</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645634</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645634</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645634</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645634</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>289469</PartyId>
      <ApplicationId>645634</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>THE OWNERS STRATA PLAN NO 73559</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>The Owners - Strata Plan No. 73559</FullName>
      <ApplicationIdS>645634</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645634</ApplicationId>
      <ApplicationIdS>645634</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645627</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/818/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>818</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra's payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:16:55.45+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645627</ApplicationIdS>
    <Determination>
      <ApplicationId>645627</ApplicationId>
      <DeterminationDate>2019-05-29T11:16:55.45+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345471</DecisionId>
      <ApplicationIdS>645627</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>349878</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>349878</GeocodeId>
      <ApplicationId>645627</ApplicationId>
      <Line1>169T Bunnerong RoadMAROUBRA  NSW  2035                                                             </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645627</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>325801</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NUNEZ</FamilyName>
      <GivenName>BALUSI ARIZOLI</GivenName>
      <Initial>BA   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs B A Nunez</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>131340</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>HARRIS</FamilyName>
      <GivenName>CHRIS </GivenName>
      <Initial>C    </Initial>
      <NameType>P</NameType>
      <FullName>Ms C Harris</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>133925</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>3</Sequence>
      <FamilyName>HARRIS</FamilyName>
      <GivenName>KATHY </GivenName>
      <Initial>K    </Initial>
      <NameType>P</NameType>
      <FullName>Ms K Harris</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>133924</PartyId>
      <ApplicationId>645627</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>HARRIS</FamilyName>
      <GivenName>MARY </GivenName>
      <Initial>M    </Initial>
      <NameType>P</NameType>
      <FullName>Ms M Harris</FullName>
      <ApplicationIdS>645627</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645627</ApplicationId>
      <ApplicationIdS>645627</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645625</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/817/2018A</ReferenceNumber>
    <Status>Approved</Status>
    <ReferenceNumberYear>2018</ReferenceNumberYear>
    <ReferenceNumberNumber>817</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development to delete condition 8b. Original Consent: Change of advertising content from Telstra standard telephone services advertising to third party advertising on Telstra's payphone.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <DeterminationDate>2019-05-29T11:12:49.05+10:00</DeterminationDate>
    <EstimatedCost>0.000000</EstimatedCost>
    <Officer>Brenton Pearce                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645625</ApplicationIdS>
    <Determination>
      <ApplicationId>645625</ApplicationId>
      <DeterminationDate>2019-05-29T11:12:49.05+10:00</DeterminationDate>
      <EffectiveDate>2019-05-29T00:00:00+10:00</EffectiveDate>
      <DeterminationType>Approved</DeterminationType>
      <AuthorityParty>Delegated                                         </AuthorityParty>
      <DecisionId>345468</DecisionId>
      <ApplicationIdS>645625</ApplicationIdS>
    </Determination>
    <Address>
      <PropertyId>316655</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>316655</GeocodeId>
      <ApplicationId>645625</ApplicationId>
      <Line1>1-11 Rainbow StreetKINGSFORD  NSW  2032                                                            </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645625</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>366852</PartyId>
      <ApplicationId>645625</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>WEHBE</FamilyName>
      <GivenName>JACQUELINE </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Ms J Wehbe</FullName>
      <ApplicationIdS>645625</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>456542</PartyId>
      <ApplicationId>645625</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>JCDECAUX AUSTRALIA PTY LTD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>JCDecaux Australia Pty Ltd</FullName>
      <ApplicationIdS>645625</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645625</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645625</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>24128</PartyId>
      <ApplicationId>645625</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick Council</FullName>
      <ApplicationIdS>645625</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645625</ApplicationId>
      <ApplicationIdS>645625</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645672</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/576/2017A</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2017</ReferenceNumberYear>
    <ReferenceNumberNumber>576</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development by deletion of secondary dwelling, alterations in opening of outbuilding at rear, changes to openings at rear of dwelling, alteration to kitchen and alterations to driveway. Original consent: Ground level alterations and additions to existing dwelling including deck at rear, alterations and additions to existing rear outbuilding with conversion to secondary dwelling.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <EstimatedCost>300000.000000</EstimatedCost>
    <Officer>Veronique Hoffman                                 </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645672</ApplicationIdS>
    <Address>
      <PropertyId>300323</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>300323</GeocodeId>
      <ApplicationId>645672</ApplicationId>
      <Line1>144 Boyce RoadMAROUBRA  NSW  2035                                                                  </Line1>
      <Line2 />
      <Ward>Central                                           </Ward>
      <ApplicationIdS>645672</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>134243</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NORLEY</FamilyName>
      <GivenName>ALLAN </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Mr A Norley</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>219368</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>NORLEY</FamilyName>
      <GivenName>CYNTHIA ADELE</GivenName>
      <Initial>CA   </Initial>
      <NameType>P</NameType>
      <FullName>Mrs C A Norley</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>25847</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NG</FamilyName>
      <GivenName>LILIAN LEE</GivenName>
      <Initial>LLK  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs L L K Ng</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>36901</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NG</FamilyName>
      <GivenName>RAYMOND HUNG</GivenName>
      <Initial>RHL  </Initial>
      <NameType>P</NameType>
      <FullName>Mr R H L Ng</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>25847</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>NG</FamilyName>
      <GivenName>LILIAN LEE</GivenName>
      <Initial>LLK  </Initial>
      <NameType>P</NameType>
      <FullName>Mrs L L K Ng</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>36901</PartyId>
      <ApplicationId>645672</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>NG</FamilyName>
      <GivenName>RAYMOND HUNG</GivenName>
      <Initial>RHL  </Initial>
      <NameType>P</NameType>
      <FullName>Mr R H L Ng</FullName>
      <ApplicationIdS>645672</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645672</ApplicationId>
      <ApplicationIdS>645672</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645730</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/286/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>286</ReferenceNumberNumber>
    <ApplicationDetails>Alterations and additions to the existing boarding house including construction of a passenger lift, rooftop landscaping to existing communal space, landscaping and pedestrian access works at ground floor, alterations at basement level, new medical centre at ground floor, and associated works (variation to building height at floor space ratio controls).</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <EstimatedCost>1028599.000000</EstimatedCost>
    <Officer>Jayden Perry                                      </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645730</ApplicationIdS>
    <Address>
      <PropertyId>301095</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>301095</GeocodeId>
      <ApplicationId>645730</ApplicationId>
      <Line1>161-165 Bunnerong RoadKINGSFORD  NSW  2032                                                         </Line1>
      <Line2 />
      <Ward>West                                              </Ward>
      <ApplicationIdS>645730</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>345601</PartyId>
      <ApplicationId>645730</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>SCIBERRAS</FamilyName>
      <GivenName>ALFRED </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Mr A Sciberras</FullName>
      <ApplicationIdS>645730</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>86092</PartyId>
      <ApplicationId>645730</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ELIBA PTY LIMITED</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Eliba Pty Limited</FullName>
      <ApplicationIdS>645730</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645730</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645730</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>37742</PartyId>
      <ApplicationId>645730</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>ELIBA PTY LTD KINGSFORD</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Eliba Pty Ltd - Kingsford</FullName>
      <ApplicationIdS>645730</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645730</ApplicationId>
      <ApplicationIdS>645730</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645660</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/285/2019</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2019</ReferenceNumberYear>
    <ReferenceNumberNumber>285</ReferenceNumberNumber>
    <ApplicationDetails>Ground level addition to western side of existing dwelling.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <EstimatedCost>30000.000000</EstimatedCost>
    <Officer>Angela Manahan                                    </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645660</ApplicationIdS>
    <Address>
      <PropertyId>314066</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>314066</GeocodeId>
      <ApplicationId>645660</ApplicationId>
      <Line1>35 Moorina AvenueMATRAVILLE  NSW  2036                                                             </Line1>
      <Line2 />
      <Ward>South                                             </Ward>
      <ApplicationIdS>645660</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>156936</PartyId>
      <ApplicationId>645660</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>BURNS</FamilyName>
      <GivenName>MARK CHRISTOPHER</GivenName>
      <Initial>MC   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M C Burns</FullName>
      <ApplicationIdS>645660</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>446591</PartyId>
      <ApplicationId>645660</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VAN BODEGRAVEN</FamilyName>
      <GivenName>JAMES </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Van Bodegraven</FullName>
      <ApplicationIdS>645660</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645660</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645660</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>446590</PartyId>
      <ApplicationId>645660</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>VAN BODEGRAVEN</FamilyName>
      <GivenName>ANDREA </GivenName>
      <Initial>A    </Initial>
      <NameType>P</NameType>
      <FullName>Mrs A Van Bodegraven</FullName>
      <ApplicationIdS>645660</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>446591</PartyId>
      <ApplicationId>645660</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>VAN BODEGRAVEN</FamilyName>
      <GivenName>JAMES </GivenName>
      <Initial>J    </Initial>
      <NameType>P</NameType>
      <FullName>Mr J Van Bodegraven</FullName>
      <ApplicationIdS>645660</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645660</ApplicationId>
      <ApplicationIdS>645660</ApplicationIdS>
    </Event>
  </Application>
  <Application>
    <ApplicationId>645624</ApplicationId>
    <NatureOfApplication>Development Application                           </NatureOfApplication>
    <NatureOfApplicationType>437</NatureOfApplicationType>
    <ReferenceNumber>DA/270/2016A</ReferenceNumber>
    <Status>Notification/Advertising</Status>
    <ReferenceNumberYear>2016</ReferenceNumberYear>
    <ReferenceNumberNumber>270</ReferenceNumberNumber>
    <Amendment>A</Amendment>
    <ApplicationDetails>Modification of approved development including upgrades to existing basement, installation of new bathroom and windows in basement including installation of a bar, and associated works. Original consent: Alterations and additions to the existing semi-detached dwelling including new first floor addition, garage, front carport and rear swimming pool.</ApplicationDetails>
    <CreatedDate>2019-05-27T00:00:00+10:00</CreatedDate>
    <LodgementDate>2019-05-27T00:00:00+10:00</LodgementDate>
    <EstimatedCost>309000.000000</EstimatedCost>
    <Officer>Perry Head                                        </Officer>
    <DADays>14</DADays>
    <ApplicationIdS>645624</ApplicationIdS>
    <Address>
      <PropertyId>302274</PropertyId>
      <ParcelId>0</ParcelId>
      <GeocodeId>302274</GeocodeId>
      <ApplicationId>645624</ApplicationId>
      <Line1>238 Carrington RoadRANDWICK  NSW  2031                                                             </Line1>
      <Line2 />
      <Ward>East                                              </Ward>
      <ApplicationIdS>645624</ApplicationIdS>
    </Address>
    <Party>
      <PartyId>409395</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Affected Person                                   </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>YANG</FamilyName>
      <GivenName>JIAN XUN</GivenName>
      <Initial>JX   </Initial>
      <NameType>P</NameType>
      <FullName>Mr J X Yang</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>345892</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Applicant                                         </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>PELZMAN</FamilyName>
      <GivenName>DAVID J</GivenName>
      <Initial>DJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr D J Pelzman</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>167119</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Municipality                                      </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>RANDWICK CITY COUNCIL</FamilyName>
      <GivenName xml:space="preserve"> </GivenName>
      <NameType>C</NameType>
      <FullName>Randwick City Council</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>407047</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>1</Sequence>
      <FamilyName>CROSS</FamilyName>
      <GivenName>ANDREW JOHN</GivenName>
      <Initial>AJ   </Initial>
      <NameType>P</NameType>
      <FullName>Mr A J Cross</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>407048</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>2</Sequence>
      <FamilyName>CROSS</FamilyName>
      <GivenName>MICHAEL ROBERT</GivenName>
      <Initial>MR   </Initial>
      <NameType>P</NameType>
      <FullName>Mr M R Cross</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Party>
      <PartyId>407049</PartyId>
      <ApplicationId>645624</ApplicationId>
      <PartyRole>Owner                                             </PartyRole>
      <Sequence>3</Sequence>
      <FamilyName>CROSS</FamilyName>
      <GivenName>SUZANNE MARGARET</GivenName>
      <Initial>SM   </Initial>
      <NameType>P</NameType>
      <FullName>Ms S M Cross</FullName>
      <ApplicationIdS>645624</ApplicationIdS>
    </Party>
    <Event>
      <ApplicationId>645624</ApplicationId>
      <ApplicationIdS>645624</ApplicationIdS>
    </Event>
  </Application>
</NewDataSet>
    http_version: 
  recorded_at: Tue, 14 May 2019 14:00:00 GMT
recorded_with: VCR 5.0.0
